@page "/friends"
@using System.Security.Claims

<div class="page-content">
    <div class="friend-actions">
        <a href="/friends/add" class="friend-action-button">
            <Icon Name="IconName.PersonPlus" />
            Add Friend
        </a>
        <a href="/friends/invites" class="friend-action-button">
            <Icon Name="IconName.Hourglass" />
            Requests
        </a>
    </div>
    <div class="content-card friend-list">
        <h1 class="content-card-title">Friends</h1>
        <div class="friend-list">
            @foreach (var friend in _friends) {
                <FriendEntry Friend="@friend" UserId="@_userId" />
            }
        </div>
    </div>
</div>

@code {
    [Inject]
    public required IHttpClientFactory HttpClientFactory { get; set; }
    [Inject]
    public required NavigationManager NavigationManager { get; set; }

    [Inject]
    public required ProtectedSessionStorage ProtectedSessionStorage { get; set; }
    private List<UserAccount> _friends = new List<UserAccount>();
    private List<int> _friendIds = new List<int>();
    private int _userId = 0;

    protected override async Task OnInitializedAsync()
    {
        var authToken = await ProtectedSessionStorage.GetAsync<string>("authToken");
        if (authToken.Value is not null) {
            _userId = int.Parse(authToken.Value);
        }
        if (_userId != 0) {
            var httpClient = HttpClientFactory.CreateClient("RunTracker");
            var response = await httpClient.GetAsync($"/user/friends/all/{_userId}");
            if (response.IsSuccessStatusCode)
            {
                _friendIds = await response.Content.ReadFromJsonAsync<List<int>>() ?? [];
                await LoadFriendInfo();
                StateHasChanged();
            }
        }
    }

    private async Task LoadFriendInfo() {
        var httpClient = HttpClientFactory.CreateClient("RunTracker");
        foreach (var id in _friendIds) {
            var response = await httpClient.GetAsync($"/user/find/{id}");
            if (response.IsSuccessStatusCode) {
                var friend = await response.Content.ReadFromJsonAsync<UserAccount>();
                if (friend is not null) {
                    _friends.Add(friend);
                }
            }
        }
    }
}
@page "/login"
@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using RunTracker.Models
@inject NavigationManager NavManager

<div class="page-content">
    <div class="content-card">
        <h1 class="content-card-title">
            Login
        </h1>
        <EditForm class="account-form" FormName="LoginForm" OnSubmit="HandleLogin" Model="@UserAccount">
            <div class="account-form-group">
                <label for="email">Email</label>
                <InputText class="custom-input" required @bind-Value="UserAccount.Email" placeholder="email"/>
            </div>
            <div class="account-form-group">
                <label for="password">Password</label>
                <InputText class="custom-input" type="password" required @bind-Value="UserAccount.Password" placeholder="password"/>
            </div>
            <button type="submit" class="form-button">Login</button>
        </EditForm>
        <p class="account-form-text">Don't have an account? <a class="form-link"href="/register">Register</a></p>
    </div>
</div>


@code {
    [CascadingParameter]
    public required HttpContext HttpContext { get; set; }

    [Inject]
    public required IHttpClientFactory HttpClientFactory { get; set; }

    [SupplyParameterFromForm]
    public UserAccount UserAccount { get; set; } = new UserAccount();

    public async Task HandleLogin() {
        var httpClient = HttpClientFactory.CreateClient("RunTracker");
        var response = await httpClient.PostAsJsonAsync("/login", UserAccount);
        if (response.IsSuccessStatusCode) {
            UserAccount newAccount = await response.Content.ReadFromJsonAsync<UserAccount>() ?? new UserAccount();
            List<Claim> claims = new List<Claim> {
                new Claim(ClaimTypes.Name, UserAccount.Username ?? ""),
                new Claim(ClaimTypes.NameIdentifier, newAccount.Id.ToString() ?? ""),
                new Claim(ClaimTypes.Role, "User")
            };
            var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
            var principal = new ClaimsPrincipal(identity);
            await HttpContext.SignInAsync(principal);

            NavManager.NavigateTo("/");
        }
        else {
            Console.WriteLine(response.StatusCode);
        }
    }
}